package fetch

import (
	"fmt"

	"github.com/cloudquery/cloudquery/cmd/util"
	"github.com/cloudquery/cloudquery/internal/analytics"
	"github.com/cloudquery/cloudquery/pkg/errors"
	"github.com/cloudquery/cloudquery/pkg/ui/console"
	"github.com/spf13/cobra"
)

const (
	fetchShort = "Fetch resources from configured providers"
	fetchLong  = `Fetch resources from configured providers
	
	This requires a config.hcl file which can be generated by "cloudquery init"
	`
	fetchExample = `  # Fetch configured providers to PostgreSQL as configured in config.hcl
	cloudquery fetch`
)

type fetchOptions struct {
	Config string
}

func NewCmdFetch() *cobra.Command {
	o := fetchOptions{}
	cmd := &cobra.Command{
		Use:     "fetch",
		Short:   fetchLong,
		Long:    fetchLong,
		Example: fetchExample,
		RunE: func(cmd *cobra.Command, args []string) error {
			c, err := console.CreateClient(cmd.Context(), util.GetConfigFile(o.Config), false, nil, util.InstanceId)
			if err != nil {
				return err
			}
			result, diags := c.Fetch(cmd.Context())
			errors.CaptureDiagnostics(diags, nil)
			if result != nil {
				for _, p := range result.ProviderFetchSummary {
					analytics.Capture("fetch", c.Providers, p, diags, "fetch_id", result.FetchId)
				}
			}
			if diags.HasErrors() {
				return fmt.Errorf("provider has one or more errors, check logs")
			}
			return nil
		},
	}
	cmd.Flags().StringVar(&o.Config, "config", "./config.*", util.ConfigHelp)
	return cmd
}

// func init() {
// 	fetchCmd.SetUsageTemplate(usageTemplateWithFlags)
// 	fetchCmd.Flags().Bool("skip-schema-upgrade", false, "skip schema upgrade of provider fetch, disabling this flag might cause issues")
// 	_ = viper.BindPFlag("skip-schema-upgrade", fetchCmd.Flags().Lookup("skip-schema-upgrade"))
// 	fetchCmd.Flags().Bool("redact-diags", false, "show redacted diagnostics only")
// 	_ = viper.BindPFlag("redact-diags", fetchCmd.Flags().Lookup("redact-diags"))
// 	_ = fetchCmd.Flags().MarkHidden("redact-diags")
// 	rootCmd.AddCommand(fetchCmd)
// }
